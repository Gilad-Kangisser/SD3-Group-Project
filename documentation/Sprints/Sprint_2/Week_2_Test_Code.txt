Week_2_Test_Code:

/* eslint-env jest */

test('This is a dummy test', () => {
  // Do nothing
}) 

const { getS } = require('../src/studentConsultation.js') 

test('get function returns the correct list of consultations', () => {
  const expected = [
    {
      date: '2023-05-15',
      time: '10:00 - 12:00',
      lecturer: 'John Doe'
    },
    {
      date: '2023-05-17',
      time: '14:00 - 16:00',
      lecturer: 'Jane Smith'
    },
    {
      date: '2023-05-19',
      time: '09:00 - 11:00',
      lecturer: 'Bob Johnson'
    }
  ] 

  const actual = getS() 

  expect(actual).toEqual(expected) 
}) 

const { get } = require('../src/lecturerConsultation.js') 

test('get function returns the list of lecturer consultations stored in the source file', () => {
  const expected = [
    { title: 'Consultation 1', date: '2023-05-11' },
    { title: 'Consultation 2', date: '2023-05-12' },
    { title: 'Consultation 3', date: '2023-05-13' }
  ] 

  const real = get() 

  expect(real).toEqual(expected) 
}) 

test('get function returns the correct searched consultations', () => {
  // Stub the getS function to return a predetermined value
  const getSStub = jest.fn(() => [
    {
      lecturerId: 4,
      dayOfWeek: 'Tuesday',
      startTime: '14:00',
      endTime: '15:00',
      durationMinutes: 60,
      maximumNumberOfConsultationsPerDay: 3,
      numberOfStudents: 3
    }
  ]) 

  const expected = [
    {
      lecturerId: 4,
      dayOfWeek: 'Tuesday',
      startTime: '14:00',
      endTime: '15:00',
      durationMinutes: 60,
      maximumNumberOfConsultationsPerDay: 3,
      numberOfStudents: 3
    }
  ] 

  const real = getSStub()  // Use the stub instead of the original function
  expect(real).toEqual(expected) 
}) 

const request = require('supertest') 
const { app, closeServer } = require('../index.js') 
const consultationDetails = require('../database.js') 

afterAll(() => {
  closeServer() 
}) 

describe('Consultation API', () => {
  describe('GET /consultationDetailSearch', () => {
    it('should return consultation details', async () => {
      const response = await request(app).get('/consultationDetailSearch') 
      expect(response.status).toBe(200) 
    }) 

    it('should return 404 if an error occurs', async () => {
      const response = await request(app).get('/consultationDetailSearc') 
      expect(response.status).toBe(404) 
      expect(response.body).toEqual({}) 
    }) 
  }) 

  describe('DELETE /removeConsultation/:consultationID', () => {
    it('should return 200', async () => {
      const consultationId = 0 
      const response = await request(app).delete(`/removeConsultation/${consultationId}`) 
      expect(response.status).toBe(200) 
    }) 
  }) 
}) 